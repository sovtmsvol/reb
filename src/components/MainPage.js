// src/components/MainPage.js
import React, { useState, useEffect } from "react";
import RebModalForm from "./RebModalForm";
import "./MainPage.css";

import { collection, addDoc, getDocs } from "firebase/firestore";
import { ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { db, storage } from "../firebase-config";

const COLUMN_TITLES = [
  "‚Ññ",
  "–ù–∞–∑–≤–∞",
  "–ó–∞–≤–æ–¥—Å—å–∫–∏–π –Ω–æ–º–µ—Ä",
  "–ù–∞—Ä—è–¥",
  "–î–æ–∫—É–º–µ–Ω—Ç –Ω–∞—Ä—è–¥—É",
  "–ê–∫—Ç –ø—Ä–∏–π–º–∞–Ω–Ω—è",
  "–î–æ–∫—É–º–µ–Ω—Ç –∞–∫—Ç—É –ø—Ä–∏–π–º–∞–Ω–Ω—è",
  "–ë–ª–∞–≥–æ–¥—ñ–π–∫–∞",
  "–ê–∫—Ç –ø—Ä–∏–π–º–∞–Ω–Ω—è –±–ª–∞–≥–æ–¥—ñ–π–∫–∏",
  "–ê–∫—Ç —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É",
  "–ê–∫—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –¥–æ–∫—É–º–µ–Ω—Ç",
  "–ê–∫—Ç—É–∞–ª—å–Ω–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è",
  "–ú–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∞ –æ—Å–æ–±–∞"
];

function MainPage() {
  const [rows, setRows] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [modalOpen, setModalOpen] = useState(false);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ Firestore –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ
  useEffect(() => {
    async function fetchData() {
      const querySnapshot = await getDocs(collection(db, "rebs"));
      const loadedRows = [];
      querySnapshot.forEach((doc) => {
        loadedRows.push({ id: doc.id, fields: doc.data().fields });
      });
      setRows(loadedRows);
    }
    fetchData();
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤ Storage —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è URL
  async function uploadFile(file, folder) {
    if (!file) return null;
    const storageRef = ref(storage, `${folder}/${Date.now()}_${file.name}`);
    await uploadBytes(storageRef, file);
    const url = await getDownloadURL(storageRef);
    return { url, name: file.name };
  }

  // –û–±—Ä–æ–±–Ω–∏–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞ –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º —Ñ–∞–π–ª—ñ–≤
  const handleSave = async (data) => {
    try {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª–∏ —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ URL (—è–∫—â–æ –≤–æ–Ω–∏ —î)
      const orderFile = await uploadFile(data.orderFile, "orderFiles");
      const acceptanceFile = await uploadFile(data.acceptanceFile, "acceptanceFiles");
      const donationFile = await uploadFile(data.donationFile, "donationFiles");

      // techStateFiles - –º–∞—Å–∏–≤ —Ñ–∞–π–ª—ñ–≤, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ
      let techStateFiles = [];
      if (data.techStateFiles && data.techStateFiles.length > 0) {
        techStateFiles = await Promise.all(
          Array.from(data.techStateFiles).map(file => uploadFile(file, "techStateFiles"))
        );
      }

      // –§–æ—Ä–º—É—î–º–æ –æ–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É Firestore
      const newRow = {
        fields: [
          data.name,
          data.serial,
          data.order,
          orderFile,
          data.acceptance,
          acceptanceFile,
          data.donation,
          donationFile,
          data.techState,
          techStateFiles,
          data.location,
          data.responsible
        ]
      };

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç —É Firestore
      const docRef = await addDoc(collection(db, "rebs"), newRow);

      // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ —É –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      setRows(prev => [...prev, { id: docRef.id, fields: newRow.fields }]);

      // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª–∫—É
      setModalOpen(false);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö:", error);
      alert("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
    }
  };

  const filteredRows = rows.filter(row =>
    row.fields[0]?.toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <div className="main-container">
      <h1>–û–±–ª—ñ–∫ –∑–∞—Å–æ–±—ñ–≤ –†–ï–ë</h1>

      <input
        className="search-input"
        type="text"
        placeholder="üîç –ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é –∑–∞—Å–æ–±—É..."
        value={searchQuery}
        onChange={(e) => setSearchQuery(e.target.value)}
      />

      <button className="add-button" onClick={() => setModalOpen(true)}>
        ‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞—Å—ñ–± –†–ï–ë
      </button>

      <table className="reb-table">
        <thead>
          <tr>
            {COLUMN_TITLES.map((title, index) => (
              <th key={index}>{title}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {filteredRows.map((row) => (
            <tr key={row.id}>
              <td>{row.id}</td>
              <td>{row.fields[0]}</td>
              <td>{row.fields[1]}</td>
              <td>{row.fields[2]}</td>

              <td>
                {row.fields[3] ? (
                  <a href={row.fields[3].url} target="_blank" rel="noopener noreferrer">
                    {row.fields[3].name}
                  </a>
                ) : "-"}
              </td>

              <td>{row.fields[4]}</td>

              <td>
                {row.fields[5] ? (
                  <a href={row.fields[5].url} target="_blank" rel="noopener noreferrer">
                    {row.fields[5].name}
                  </a>
                ) : "-"}
              </td>

              <td>{row.fields[6]}</td>

              <td>
                {row.fields[7] ? (
                  <a href={row.fields[7].url} target="_blank" rel="noopener noreferrer">
                    {row.fields[7].name}
                  </a>
                ) : "-"}
              </td>

              <td>{row.fields[8]}</td>

              <td>
                {Array.isArray(row.fields[9]) && row.fields[9].length > 0 ? (
                  row.fields[9].map((fileObj, i) => (
                    <div key={i}>
                      <a href={fileObj.url} target="_blank" rel="noopener noreferrer">
                        {fileObj.name}
                      </a>
                    </div>
                  ))
                ) : "-"}
              </td>

              <td>{row.fields[10]}</td>
              <td>{row.fields[11]}</td>
            </tr>
          ))}
        </tbody>
      </table>

      {modalOpen && (
        <RebModalForm onClose={() => setModalOpen(false)} onSave={handleSave} />
      )}
    </div>
  );
}

export default MainPage;
